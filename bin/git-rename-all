#! /usr/bin/env ruby

require 'pp'
require_relative '../private_lib/yargs'
require_relative '../private_lib/git'

yargs = Yargs.new(ARGV, :consume)
dry_run = yargs.flag('dry-run')

usage = <<EOS
Description
  Rename all files recursively via regexp matching & substitution.
  Only works on files that are in the current HEAD commit (files that
  exist only on disk or in the index will be skipped). The pattern is
  matched against path segments individually, not entire path strings.
  Traversal is pre-order depth-first starting in the current working 
  directory.

Usage
  git rename-all PATTERN REPLACEMENT

Options
  -i, --ignore-case
    Consider PATTERN to be a case insensitive regular expression.

Arguments
  PATTERN
    A regular expression. Will be recursively tested against each file & 
    directory name in the current HEAD tree.
    
  REPLACEMENT
    A replacement string. May include backreferences as supported by Ruby's
    Regexp.
EOS

if yargs.flag(:h, :help)
  puts usage
  exit 0
end

regexp_opt = ''
regexp_opt += 'i' if yargs.flag(:i, :'ignore-case')

if ARGV.length != 2
  $stderr.puts usage
  exit 1
end

pattern = Regexp.new(ARGV[0], regexp_opt.length > 0 ? regexp_opt : nil)
replacement = ARGV[1]

error = false
Tree.head.walk_children do |node|
  if pattern =~ node.name
    old_path = node.path
    new_name = node.name.gsub(pattern, replacement)
    new_path = ((node.parent && "#{node.parent.path}#{File::SEPARATOR}") || '') + new_name
    
    cmd = "git rename #{old_path} #{new_path}"
    puts cmd
    if system(cmd)
        node.name = new_name
    else
        error = true
    end
  end
end

if error
    exit 1
else
    exit 0
end
