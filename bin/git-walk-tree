#! /usr/bin/env ruby

require_relative '../private_lib/yargs'
require_relative '../private_lib/git'

$usage = <<EOS
Description
  Walks each node in the tree of a given commit & executes a ruby script
  for each node.
  
Usage
  git walk-tree [--script RUBY_STRING] [TREE [PATH]]

Options
  -s, --script (OPTIONAL: If not given, the script is read from stdin.)
    A ruby script to execute for each node in the tree. When invoked, the
    script can access the local variable `node` or the global `$NODE` for
    properties of the node (like the `path`, `absolute_path`, `name`, & `type`).
    
Arguments
  TREE (OPTIONAL: Defaults to HEAD)
    A reference to a tree, commit, or tag.
  
  PATH (OPTIONAL: Defaults to the current working directory)
    The root path from which to start the walk. This will be the current
    working directory with the script is invoked.
EOS
  
yargs = Yargs.new(ARGV, :consume)

if yargs.flag(:h, :help)
  puts $usage
  exit 0
end

def bail(msg=nil)
  $stderr.puts msg if msg
  puts
  $stderr.puts $usage
  exit 1
end

script = yargs.value(:s, :script) || $stdin.read
compiled_script = eval("proc { |node|\n#{script}\n}")

unless (0..2).to_a.include?(ARGV.length)
  $stderr.puts $usage
  exit 1
end

exit_code = 0

ref = ARGV[0] || 'HEAD'
path = ARGV[1] || nil

unless ['commit', 'tree'].include?(Git.object_type(ref))
  bail("Not a valid commit or tree reference: #{ref}")
end

walk = proc {
  Tree.from_ref(ref).walk_children do |node|
    $NODE = node
    begin
      compiled_script.call(node)
    rescue Exception => ex
      exit_code = 1
      $stderr.puts("ERROR @ #{node.path}: #{ex.message}")
    end
  end
}

# Change directory to root instead of dealing with
# ancestor directory references (normalized paths to have names instead
# of '../..')
if path
  Dir.chdir(path, &walk)
else
  walk[]
end

exit exit_code
